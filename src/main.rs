use std::io::prelude::*;
use std::net::TcpStream;

mod record;
mod handshake;
mod client_hello;
mod handshake_message;

use record::*;
use handshake::*;

fn main() -> std::io::Result<()> {
    let mut stream = TcpStream::connect("142.93.165.59:443")?;
    let mut buf = vec![0; 1024]; //I need to initialize vector
    //we will get eg cipher

    let data = vec![3, 3, 94, 219, 168, 2, 168, 10, 218, 126, 67, 159, 132, 236, 214, 106, 205, 197, 27, 176, 125, 222, 192, 168, 17, 205, 169, 145, 128, 107, 235, 199, 165, 169, 0, 0, 108, 192, 43, 192, 44, 192, 134, 192, 135, 192, 9, 192, 35, 192, 10, 192, 36, 192, 114, 192, 115, 192, 172, 192, 173, 192, 8, 192, 47, 192, 48, 192, 138, 192, 139, 192, 19, 192, 39, 192, 20, 192, 40, 192, 118, 192, 119, 192, 18, 0, 156, 0, 157, 192, 122, 192, 123, 0, 47, 0, 60, 0, 53, 0, 61, 0, 65, 0, 186, 0, 132, 0, 192, 192, 156, 192, 157, 0, 10, 0, 158, 0, 159, 192, 124, 192, 125, 0, 51, 0, 103, 0, 57, 0, 107, 0, 69, 0, 190, 0, 136, 0, 196, 192, 158, 192, 159, 0, 22, 1, 0, 0, 111, 0, 23, 0, 0, 0, 22, 0, 0, 0, 5, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 18, 0, 16, 0, 0, 13, 119, 119, 119, 46, 101, 105, 100, 97, 110, 46, 110, 101, 116, 255, 1, 0, 1, 0, 0, 35, 0, 0, 0, 10, 0, 12, 0, 10, 0, 23, 0, 24, 0, 25, 0, 21, 0, 19, 0, 11, 0, 2, 1, 0, 0, 13, 0, 22, 0, 20, 4, 1, 4, 3, 5, 1, 5, 3, 6, 1, 6, 3, 3, 1, 3, 3, 2, 1, 2, 3, 0, 16, 0, 11, 0, 9, 8, 104, 116, 116, 112, 47, 49, 46, 49];
    let handshake = handshake::Handshake::create(HandshakeType::ClientHello, data);
    let record = record::Record::create(RecordType::Handshake, handshake);

    stream.write(&record.header_to_message())?;
    stream.write(&record.protocol_data.header_to_message())?;
    stream.write(&[3, 3, 94, 219, 168, 2, 168, 10, 218, 126, 67, 159, 132, 236, 214, 106, 205, 197, 27, 176, 125, 222, 192, 168, 17, 205, 169, 145, 128, 107, 235, 199, 165, 169, 0, 0, 108, 192, 43, 192, 44, 192, 134, 192, 135, 192, 9, 192, 35, 192, 10, 192, 36, 192, 114, 192, 115, 192, 172, 192, 173, 192, 8, 192, 47, 192, 48, 192, 138, 192, 139, 192, 19, 192, 39, 192, 20, 192, 40, 192, 118, 192, 119, 192, 18, 0, 156, 0, 157, 192, 122, 192, 123, 0, 47, 0, 60, 0, 53, 0, 61, 0, 65, 0, 186, 0, 132, 0, 192, 192, 156, 192, 157, 0, 10, 0, 158, 0, 159, 192, 124, 192, 125, 0, 51, 0, 103, 0, 57, 0, 107, 0, 69, 0, 190, 0, 136, 0, 196, 192, 158, 192, 159, 0, 22, 1, 0, 0, 111, 0, 23, 0, 0, 0, 22, 0, 0, 0, 5, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 18, 0, 16, 0, 0, 13, 119, 119, 119, 46, 101, 105, 100, 97, 110, 46, 110, 101, 116, 255, 1, 0, 1, 0, 0, 35, 0, 0, 0, 10, 0, 12, 0, 10, 0, 23, 0, 24, 0, 25, 0, 21, 0, 19, 0, 11, 0, 2, 1, 0, 0, 13, 0, 22, 0, 20, 4, 1, 4, 3, 5, 1, 5, 3, 6, 1, 6, 3, 3, 1, 3, 3, 2, 1, 2, 3, 0, 16, 0, 11, 0, 9, 8, 104, 116, 116, 112, 47, 49, 46, 49])?;    //stream.read_to_end(&mut buffer)?;

    stream.read(&mut buf).unwrap();
    //stream.read_exact(&mut buf);


    println!("Server hello: {:?}", String::from_utf8_lossy(&buf[..]));

    Ok(())
}
